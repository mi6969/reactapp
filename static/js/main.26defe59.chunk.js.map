{"version":3,"sources":["index.js"],"names":["Square","props","className","data-pro","value","onClick","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleCheck","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"yOAKA,SAASA,EAAOC,GACd,OACE,4BAAQC,UAAU,SAASC,WAAUF,EAAMG,MAAOC,QAASJ,EAAMI,SAC/DJ,EAAMG,O,IAQJE,E,2KAESC,GAAI,IAAD,OACd,OACA,kBAACP,EAAD,CACCI,MAAOI,KAAKP,MAAMQ,QAAQF,GAC1BF,QAAS,kBAAM,EAAKJ,MAAMI,QAAQE,Q,+BAMnC,OACE,6BACE,yBAAKL,UAAU,aACZM,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAErB,yBAAKR,UAAU,aACZM,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAErB,yBAAKR,UAAU,aACZM,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GA3BTC,IAAMC,WAwCpBC,E,kDACJ,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IACDa,MAAQ,CACXC,QAAS,CAAC,CACRN,QAASO,MAAM,GAAGC,KAAK,QAEzBC,WAAY,EACZC,SAAS,GAPM,E,wDAWPZ,GACV,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMI,WAAa,GAE9DT,EADUM,EAAQA,EAAQM,OAAS,GACjBZ,QAAQW,QAC5BE,EAAgBb,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKM,MAAMK,QAAU,IAAM,IACxCX,KAAKe,SAAS,CACZR,QAASA,EAAQS,OAAO,CAAC,CACvBf,QAASA,KAEXS,WAAYH,EAAQM,OACpBF,SAAUX,KAAKM,MAAMK,a,6BAIpBM,GACLjB,KAAKe,SAAS,CACZL,WAAYO,EACZN,QAAUM,EAAO,IAAO,M,+BAIhB,IAgBJC,EAhBG,OACDX,EAAUP,KAAKM,MAAMC,QACrBY,EAAUZ,EAAQP,KAAKM,MAAMI,YAC7BU,EAASN,EAAgBK,EAAQlB,SAEjCoB,EAAQd,EAAQe,KAAI,SAACL,EAAMM,GAC/B,IAAMC,EAAOD,EACZ,eAAiBA,EACjB,mBACA,OACE,wBAAIE,IAAKF,GACP,4BAAQ1B,QAAS,kBAAM,EAAK6B,OAAOH,KAAQC,OAalD,OANEN,EADCE,EACQ,WAAaA,EAGb,iBAAmBpB,KAAKM,MAAMK,QAAU,IAAM,KAIvD,yBAAKjB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACI,EAAD,CACAG,QAASkB,EAAQlB,QACjBJ,QAAS,SAAAE,GAAC,OAAI,EAAK4B,YAAY5B,OAGjC,yBAAKL,UAAU,aACb,6BAAMwB,GACN,4BAAKG,S,GAtEIlB,IAAMC,WAsFzB,SAASU,EAAgBb,GAYvB,IAXA,IAAM2B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGA7B,EAAI,EAAGA,EAAI6B,EAAMf,OAAQd,IAAK,CAAC,IAAD,cACnB6B,EAAM7B,GADa,GAC9B8B,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAI9B,EAAQ4B,IAAM5B,EAAQ4B,KAAO5B,EAAQ6B,IAAM7B,EAAQ4B,KAAO5B,EAAQ8B,GACpE,OAAO9B,EAAQ4B,GAGnB,OAAO,KAzBTG,IAASC,OACP,kBAAC5B,EAAD,MACA6B,SAASC,eAAe,W","file":"static/js/main.26defe59.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n// Square Component\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" data-pro={props.value} onClick={props.onClick}>\r\n     {props.value}\r\n    </button>\r\n  );\r\n}\r\n  \r\n\r\n\r\n  // Board Component\r\n  class Board extends React.Component {\r\n\r\n    renderSquare(i) {\r\n      return (\r\n      <Square\r\n       value={this.props.squares[i]} \r\n       onClick={() => this.props.onClick(i)}\r\n       />\r\n       );\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    \r\n  }\r\n\r\n\r\n\r\n\r\n  \r\n  // Game Component \r\n  class Game extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        history: [{\r\n          squares: Array(9).fill(null),\r\n        }],\r\n        stepNumber: 0,\r\n        xIsNext: true,\r\n      };\r\n    }\r\n\r\n    handleCheck(i) {\r\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice();\r\n      if (calculateWinner(squares) || squares[i]) {\r\n        return;\r\n      }\r\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n      this.setState({\r\n        history: history.concat([{\r\n          squares: squares,\r\n        }]),\r\n        stepNumber: history.length,\r\n        xIsNext: !this.state.xIsNext,\r\n      });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0\r\n    });\r\n  }\r\n\r\n    render() {\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepNumber];\r\n      const winner = calculateWinner(current.squares);\r\n\r\n      const moves = history.map((step, move) => {\r\n        const desc = move ?\r\n         'Go to move #' + move :\r\n         'Go to game start';\r\n         return (\r\n           <li key={move}>\r\n             <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n           </li>\r\n         );\r\n      });\r\n\r\n      let status;\r\n      if(winner) {\r\n        status = 'Winner: ' + winner;\r\n        \r\n      } else {\r\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n      }\r\n\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board\r\n            squares={current.squares}\r\n            onClick={i => this.handleCheck(i)}\r\n             />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n\r\n\r\n\r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n  \r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }"],"sourceRoot":""}